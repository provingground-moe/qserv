/*
 * LSST Data Management System
 * Copyright 2011-2018 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */

/**
 * replica.proto
 *   defines the wire-messages sent between replication controllers and
 *   worker services.
 */

package lsst.qserv.replica;


////////////////////////////////////////////////////////
//                  Request messages                  //
////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
// Protocol header sent to a worker. Any communication begins with
// sending this header and specifying a type of the request.
//
// Chunk replication requests must be followed by another message of
// the corresponding type to provide a scope of the request.
//
// Requests affecting the overall status of the service do not require
// any additional messages.

// Request types related to operations with replicas
//
enum ProtocolQueuedRequestType {

    REPLICA_CREATE   = 0;    // replicate a chunk
    REPLICA_DELETE   = 1;    // delete an existing replica of a chunk
    REPLICA_FIND     = 2;    // find out if a replica is present, and report its state
    REPLICA_FIND_ALL = 3;    // find all replicas and report their states
    TEST_ECHO        = 4;    // test the worker-side framework
    SQL              = 5;    // execute an SQL statement against the worker's database
}

// Request types for managing above defined requests
//
enum ProtocolManagementRequestType {

    REQUEST_STATUS   = 0;    // check a status of a request
    REQUEST_STOP     = 1;    // stop a previously requested request
}

// Request types affecting the overall state of the worker replication service
//
enum ProtocolServiceRequestType {

    SERVICE_SUSPEND  = 0;
    SERVICE_RESUME   = 1;
    SERVICE_STATUS   = 2;
    SERVICE_REQUESTS = 3;
    SERVICE_DRAIN    = 4;
}

// Message header is sent next after the frame size request. A sender must
// indicate a class of a request by choosing one of a few options defined
// in 'Type', and then set the specific request in the corresponding
// optional field.
//
message ProtocolRequestHeader {

    /// The unique identifier of a request
    required string id = 1;

    // The request type selector determines which class of the below specified
    // optional subtypes to use
    enum RequestType {
        QUEUED  = 0;
        REQUEST = 1;
        SERVICE = 2;
    }
    required RequestType type = 2;

    // Subtypes of requests

    optional ProtocolQueuedRequestType     queued_type     = 3;
    optional ProtocolManagementRequestType management_type = 4;
    optional ProtocolServiceRequestType    service_type    = 5;
}

//
// The type of the next message (if any) to be sent depends on  specific type of
// the operation. It should provide additional parameters of the operation.
//

// This is a replication request. The message defines a scope of the request and
// its unique identity. This message is sent once after the header.
//
message ProtocolRequestReplicate {

    required int32  priority = 1;
    required string database = 2;
    required uint32 chunk    = 3;
    required string worker   = 4;
}

// This is a replica deletion request. The message defines a scope of the request
// and its unique identity. This message is sent once after the header.
//
message ProtocolRequestDelete {

    required int32  priority = 1;
    required string database = 2;
    required uint32 chunk    = 3;
}

// This is a replica lookup request. The message defines a scope of the request
// and its unique identity. This message is sent once after the header.
//
message ProtocolRequestFind {

    required int32  priority = 1;
    required string database = 2;
    required uint32 chunk    = 3;

    /// Compute a check/control sum for each file
    required bool compute_cs = 4;
}

// This is a replica lookup request for multiple replicas. The message defines
// a scope of the request and its unique identity. This message is sent once
// after the header.
//
message ProtocolRequestFindAll {

    required int32  priority = 1;
    required string database = 2;
}

// This is a test request which, depending on its mode, would be addressed
// either instantly or be put into the Processor's queue. The desired mode
// is specified via the optional parameter 'delay'.
// This message is sent once after the header.
//
message ProtocolRequestEcho {

    required int32 priority = 1;

    /// Data to be echoed back upon the completion of the request (if successful)
    required string data = 2;

    /// The simulated processing time (milliseconds) of the request.
    /// If the delay is greater than 0 then the request will be queued for
    /// delayed processing via the Processor's queue.
    optional uint64 delay = 3 [default = 0];
}

// This message is used in the table schema definitions
message ProtocolRequestSqlColumn {
    required string name = 1;
    required string type = 2;
}

// This request is always queued.
// This message is sent once after the header for the 'SQL' request types
message ProtocolRequestSql {

    required int32 priority = 1;

    enum Type {
        QUERY = 0;
        CREATE_DATABASE = 1;
        DROP_DATABASE = 2;
        ENABLE_DATABASE = 3;    // in Qserv
        DISABLE_DATABASE = 4;   // in Qserv
        CREATE_TABLE = 5;
        DROP_TABLE = 6;
        REMOVE_TABLE_PARTITIONING = 7;
        DROP_TABLE_PARTITION = 8;
    }
    required Type type = 2;

    /// A limit for the maximum number of rows to be returned by a request.
    /// If the limit is exceeded then extended error code ProtocolStatusExt::LARGE_RESULT
    /// will be returned to a caller.
    required uint64 max_rows = 3;

    // Variable parameters of request types. Note, that a specific request would
    // only use a subset of those as needed.

    optional string query    = 4 [default = ""];    /// The query to be executed
    optional string user     = 5 [default = ""];    /// The name of a database user authorized in
                                                    /// a context of the query.
    optional string password = 6 [default = ""];    /// Database password for the user account
    optional string database = 7 [default = ""];    /// The name of a database
    optional string table    = 8 [default = ""];    /// The name of a table
    optional string engine   = 9 [default = ""];    /// The name of an MySQL engine

    /// The name of a column (if any) which will be used as a key for MySQL partitions
    optional string partition_by_column = 10 [default = ""];

    optional uint32 transaction_id = 11 [default = 0];  /// An identifier of a super-transaction which
                                                        /// corresponds to a MySQL partition to be removed

    /// table schema
    repeated ProtocolRequestSqlColumn columns = 12;
}

// This request is sent to stop an on-going replication (if any is still in progress).
// This message is sent once after the header.
//
message ProtocolRequestStop {

    /// an identifier of a request to be stopped
    required string id = 1;

    // A specific type of the request will affect a choice of the status
    // object returned in response. The type needs to match a value set
    // in the preceding header at: ProtocolRequestHeader::type

    optional ProtocolQueuedRequestType queued_type = 2;
}

// This request is sent to request a status of an on-going replication (if any
// is still in progress). This message is sent once after the header.
//
message ProtocolRequestStatus {

    /// an identifier of a request to be inspected
    required string id = 1;

    // A specific type of the request will affect a choice of the status
    // object returned in response. The type needs to match a value set
    // in the preceding header at: ProtocolRequestHeader::type

    optional ProtocolQueuedRequestType queued_type = 2;
}

/////////////////////////////////////////////////////////
//                  Response messages                  //
/////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////
// All response sequences begin with sending the response
// header message containing a unique identifier of the original
// request.
//
// The header must be followed by one or more messages which are
// expected by the Controller in response to a preceding
// request associated with the original request.
//
message ProtocolResponseHeader {

    /// The unique identifier of the original request to which this
    /// response is being sent.
    required string id = 1;
}

/////////////////////////////////////////////////////////////
// These messages are expected by master upon a completion of
// the corresponding replication operations.

// Performance counters (timers) of the requests.
// This message must be present in the relevant replies.
//
message ProtocolPerformance {

    /// When a request was received by a worker service
    required uint64 receive_time = 1;

    /// When request execution started by a worker service
    required uint64 start_time = 2;

    /// When request execution finished by a worker service
    required uint64 finish_time = 3;
}

// Status values returned by all request related to operations with
// replicas. Request management operations always return messages whose types
// match the return types of the corresponding (original) replica-related requests.
// Service management requests have their own set of status values.
//
enum ProtocolStatus {
    SUCCESS       = 0;
    QUEUED        = 1;
    IN_PROGRESS   = 2;
    IS_CANCELLING = 3;
    BAD           = 4;
    FAILED        = 5;
    CANCELLED     = 6;
}
enum ProtocolStatusExt {
    NONE          = 0;
    INVALID_PARAM = 1;
    INVALID_ID    = 2;
    DUPLICATE     = 3;
    FOLDER_STAT   = 4;
    FILE_STAT     = 5;
    FILE_SIZE     = 6;
    FOLDER_READ   = 7;
    FILE_READ     = 8;
    FILE_ROPEN    = 9;
    FILE_CREATE   = 10;
    FILE_OPEN     = 11;
    FILE_RESIZE   = 12;
    FILE_WRITE    = 13;
    FILE_COPY     = 14;
    FILE_DELETE   = 15;
    FILE_RENAME   = 16;
    FILE_EXISTS   = 17;
    SPACE_REQ     = 18;
    NO_FOLDER     = 19;
    NO_FILE       = 20;
    NO_ACCESS     = 21;
    NO_SPACE      = 22;
    FILE_MTIME    = 23;
    MYSQL_ERROR   = 24;
    LARGE_RESULT  = 25;
    NO_SUCH_TABLE = 26;
}

message ProtocolFileInfo {

    /// The name of a file
    required string name = 1;

    /// Size in bytes
    required uint64 size = 2;

    /// Control sum (if available)
    required string cs = 3;

    /// The file content modification time in seconds (since UNIX Epoch)
    required uint32 mtime = 4;

    // The following parameters are set in the relevant contexts only.
    // Otherwise they'll be set to some default value)

    /// When the file migration started (where applies)
    optional uint64 begin_transfer_time = 5 [default = 0];

    /// When the file migration finished (where applies)
    optional uint64 end_transfer_time = 6 [default = 0];

    /// The size of an input file (where applies)
    optional uint64 in_size = 7 [default = 0];
}

message ProtocolReplicaInfo {
    enum ReplicaStatus {
        NOT_FOUND  = 0;
        CORRUPT    = 1;
        INCOMPLETE = 2;
        COMPLETE   = 3;
    }
    required ReplicaStatus status   = 1;
    required string        worker   = 2;
    required string        database = 3;
    required uint32        chunk    = 4;

    /// File-specific information (if available)
    repeated ProtocolFileInfo file_info_many = 5;

    /// When the replica status was obtained by a worker
    required uint64 verify_time = 6;
}

message ProtocolResponseReplicate {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The field is set for duplicate requests only
    optional string duplicate_request_id = 3 [default = ""];

    /// The performance of this operation
    required ProtocolPerformance performance = 4;

    // ------------------------------------------------------------------
    // The following optional fields are set upon a successful completion
    // of the request
    // ------------------------------------------------------------------

    /// The performance of the target operation. This field represents
    /// stats of the replica creation request obtained by the request
    /// management operations.
    optional ProtocolPerformance target_performance = 5;

    /// Extended information on the replica
    optional ProtocolReplicaInfo replica_info = 6;

    /// Parameters of the original request to which this response
    /// is related.
    optional ProtocolRequestReplicate request = 7;
}

message ProtocolResponseDelete {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The field is set for duplicate requests only
    optional string duplicate_request_id = 3 [default = ""];

    /// The performance of this operation
    required ProtocolPerformance performance = 4;

    // ------------------------------------------------------------------
    // The following optional fields are set upon a successful completion
    // of the request
    // ------------------------------------------------------------------

    /// The performance of the target operation. This field represents
    /// stats of the replica deletion request obtained by the request
    /// management operations
    optional ProtocolPerformance target_performance = 5;

    /// Extended information on the request
    optional ProtocolReplicaInfo replica_info = 6;

    /// Parameters of the original request to which this response
    /// is related
    optional ProtocolRequestDelete request = 7;

}

message ProtocolResponseFind {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The performance of this operation
    required ProtocolPerformance performance = 3;

    // ------------------------------------------------------------------
    // The following optional fields are set upon a successful completion
    // of the request
    // ------------------------------------------------------------------

    /// The performance of the target operation. This field represents
    /// stats of the replica deletion request obtained by the request
    /// management operations
    optional ProtocolPerformance target_performance = 4;

    /// Extended information on the request
    optional ProtocolReplicaInfo replica_info = 5;

    /// Parameters of the original request to which this response
    /// is related
    optional ProtocolRequestFind request = 6;
}

message ProtocolResponseFindAll {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The performance of this operation
    required ProtocolPerformance performance = 3;

    /// The performance of the target operation. This field represents
    /// stats of the replicas lookup request obtained by the request
    /// management operations
    optional ProtocolPerformance target_performance = 4;

    /// Extended information on the request
    repeated ProtocolReplicaInfo replica_info_many = 5;

    // ------------------------------------------------------------------
    // The following optional fields are set upon a successful completion
    // of the request
    // ------------------------------------------------------------------

    /// Parameters of the original request to which this response
    /// is related
    optional ProtocolRequestFindAll request = 6;
}

///////////////////////////////////////////////////////////////////
// The message returned in response to the worker testing requests.

message ProtocolResponseEcho {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The performance of this operation
    required ProtocolPerformance performance = 3;

    // -----------------------------------------------------------------
    // The following optional field are set upon a successful completion
    // of the request
    // -----------------------------------------------------------------

    /// The performance of the target operation. This field represents stats
    /// of the test request obtained by the request management operations.
    optional ProtocolPerformance target_performance = 4;

    /// Extended information on the request
    optional string data = 5;

    /// Parameters of the original request to which this response is related
    optional ProtocolRequestEcho request = 6;
}

/////////////////////////////////////////////////////////////////////
// The messages returned in response to an SQL query executed against 
// the worker's database

/// This message captures fields from MYSQL_FIELD

message ProtocolResponseSqlField {
                                        // C lang type(s)         Description
                                        // --------------------   ---------------------------------------------
    required string name       =  1;    // char*, unsigned int    The name of the column
    required string org_name   =  2;    // char*, unsigned int    The original name of the column
    required string table      =  3;    // char*, unsigned int    The name of the table
    required string org_table  =  4;    // char*, unsigned int    The original name of the table
    required string db         =  5;    // char*, unsigned int    The name of the database (schema)
    required string catalog    =  6;    // char*, unsigned int    The catalog name (always 'def')
    required string def        =  7;    // char*, unsigned int    default value
    required uint32 length     =  8;    // unsigned int           The length (width) of the column definition
    required uint32 max_length =  9;    // unsigned int           The maximum length of the column value
    required uint32 flags      = 10;    // unsigned int           Flags
    required uint32 decimals   = 11;    // unsigned int           Number of decimals
    required int32  type       = 12;    // enum enum_field_types  Field type. See all known types at:
                                        //                        https://dev.mysql.com/doc/refman/8.0/en/c-api-data-structures.html
}

/// The message representing data of a row from a result set
message ProtocolResponseSqlRow {

    /// An array of the raw (non-null terminated) byte strings, where each string
    /// represents a cell.
    /// Note that the number of elements in the array must match
    /// the number of fields.
    repeated bytes cells = 1;

    /// An array of the boolean flags indicating at which position a value
    /// of the corresponding cell has SQL NULL.
    /// Note that the number of elements in the array must match
    /// the number of fields.
    repeated bool nulls = 2;
}

message ProtocolResponseSql {

    /// The completion status of the operation
    required ProtocolStatus status = 1;

    /// Extended status of this operation
    optional ProtocolStatusExt status_ext = 2 [default = NONE];

    /// The performance of this operation
    required ProtocolPerformance performance = 3;

    // -----------------------------------------------------------------
    // The following optional field are set upon a successful completion
    // of the request
    // -----------------------------------------------------------------

    /// The performance of the target operation. This field represents stats
    /// of the test request obtained by the request management operations.
    optional ProtocolPerformance target_performance = 4;

    // Extended information on the request

    /// MySQL-specific error
    optional string error = 5 [default = ""];

    /// Of the connection
    optional string char_set_name = 6 [default = ""];

    /// The request produced a result set
    optional bool has_result = 7;

    /// A vector with field definitions from a result set,
    /// where the number of objects in the array represents
    /// the "width" of the result set
    repeated ProtocolResponseSqlField fields = 8;

    /// An array of rows from a result set,
    /// where the number of elements in the array represents
    /// the number of rows.
    repeated ProtocolResponseSqlRow rows = 9;

    /// Parameters of the original request to which this response is related
    optional ProtocolRequestSql request = 10;
}

/////////////////////////////////////////////////////////////////////////
// The message returned in response to requests related to (or affecting)
// the overall state of the server-side replication service.

message ProtocolServiceResponseInfo {

    /// Replication related requests only
    required ProtocolQueuedRequestType queued_type = 1;

    required string id       = 2;
    required int32  priority = 3;
}

message ProtocolServiceResponse {

    /// Completion status of the operation
    enum Status {
        SUCCESS = 0;
        FAILED  = 1;
    }
    required Status status = 1;
    required ProtocolPerformance performance = 2;

    enum ServiceState {
        SUSPEND_IN_PROGRESS = 0;
        SUSPENDED           = 1;
        RUNNING             = 2;
    }
    required ServiceState service_state = 3;
    required string       technology    = 4;

    /// When the service started (milliseconds since UNIX Epoch)
    required uint64 start_time = 5;

    // Counters for requests known to the service since its last start

    required uint32 num_new_requests         = 6;
    required uint32 num_in_progress_requests = 7;
    required uint32 num_finished_requests    = 8;

    // Optional (depending on a request) collections of requests in each queue

    repeated ProtocolServiceResponseInfo new_requests         =  9;
    repeated ProtocolServiceResponseInfo in_progress_requests = 10;
    repeated ProtocolServiceResponseInfo finished_requests    = 11;
}

////////////////////////////////////////////
//         The FileServer protocol        //
////////////////////////////////////////////

message ProtocolFileRequest {

    /// The name of a database
    required string database = 1;

    /// The name of a file (including its extension and excluding any path)
    required string file = 2;

    /// Tell the server to begin sending file content immediately
    /// after sending the response message. Otherwise the server will just
    /// close a connection.
    required bool send_content = 3;
}

message ProtocolFileResponse {

    /// The flag indicating if the earlier requested file is available,
    /// and it can be read by the server.
    required bool available = 1;

    /// The file size (bytes)
    required uint64 size = 2;

    /// The file content modification time in seconds (since UNIX Epoch)
    required uint32 mtime = 3;

}
